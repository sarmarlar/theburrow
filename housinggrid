import os

import sys

import utility





def list_neighbors(grid, R, location):

    '''

    Create a list of all the neighbors of a given homeowner



    Inputs:

        grid: (list of lists of strings) the grid 

        R: (int) radius for the neighborhood

        location: (int, int) a grid location of the homeowner



    Returns:

        neighborhood: (list of tuples) the neighbors

        '''



    x_upper = min(location[1] + R, len(grid) - 1)

    x_lower = max(location[1] - R, 0)

    y_upper = min(location[0] + R, len(grid) - 1)

    y_lower = max(location[0] - R, 0)

    neighborhood = []



    for x in range(x_lower, x_upper + 1):

        for y in range (y_lower, y_upper + 1):

            if 0 <= abs(location[0] - y) + abs(location[1] - x) and abs(location[0] - y) + abs(location[1] - x) <= R:

                neighborhood.append((x, y))



    return neighborhood





def is_satisfied(grid, R, threshold, location):

    '''

    Is the homeowner at the specified location satisfied?



    Inputs:

        grid: (list of lists of strings) the grid 

        R: (int) radius for the neighborhood

        threshold: (float) satisfaction threshold

        location: (int, int) a grid location



    Returns:

        True, if the location's neighbor score is at or above the threshold

    '''



    assert grid[location[0]][location[1]] != 'O', ("This location is unoccupied")



    S = 0

    P = 0

    num_neighbors = 0

    location_color = grid[location[0]][location[1]]

    neighborhood = list_neighbors(grid, R, location)



    for neighbor in neighborhood:

        num_neighbors = num_neighbors + 1     

        neighbor_color = grid[neighbor[1]][neighbor[0]]

        if neighbor_color == location_color:

            S = S + 1         

        elif neighbor_color == 'O':

            P = P + 1     



    satisfaction_score = S + 0.5 * P

    result = ((satisfaction_score / num_neighbors) >= threshold)



    return result





def list_open_locations(grid):

    '''

    Create a list of open locations.



    Inputs:

        grid: (list of lists of strings)



    Returns:

        open_locations: list of tuples

    '''



    open_locations = []

    for k in range(len(grid)):

        for l in range(len(grid)):

            if grid[k][l] == 'O':

                open_locations.append((k, l))

    return open_locations





def list_dissatisfied_homeowners(grid, R, threshold):

    '''

    Create a list of dissatisfied homeowners



    Inputs:

        grid: (list of lists of strings) the grid

        R: (int) radius for the neighborhood

        threshold: (float) satisfaction threshold



    Returns:

        function_dissatisfied_homeowners: (list of tuples)

    '''



    dissatisfied_homeowners = []

    for k in range(len(grid)):

        for l in range(len(grid)):

            if grid[k][l] != 'O':

                if not is_satisfied(grid, R, threshold, (k, l)):

                    dissatisfied_homeowners.append((k, l))



    return dissatisfied_homeowners





def attempt_relocation(grid, R, threshold, homeowner, new_location):

    '''

    Attempt a relocation and keep it if the relocation is satisfactory.



    Inputs:

        grid: (list of lists of strings) the grid

        R: (int) radius for the neighborhood

        threshold: (float) satisfaction threshold

        homeowner: (tuple) the location of the homeowner to be relocated

        new_location: (tuple) the location to which the homeowner will be relocated

        homeowner_moved: (int) this will always be fed in as 0. Modified and then returned.



    Returns:

        homeowner_moved: (int) 1 if the homeowner was moved; 0 if not moved.

    '''



    if homeowner == new_location:

        if is_satisfied(grid, R, threshold, new_location):

            homeowner_moved = 1

        else:

            homeowner_moved = 0

    else:

        grid[new_location[0]][new_location[1]] = grid[homeowner[0]][homeowner[1]]

        grid[homeowner[0]][homeowner[1]] = 'O'

        if is_satisfied(grid, R, threshold, new_location):

            homeowner_moved = 1

        else:

            grid[homeowner[0]][homeowner[1]] = grid[new_location[0]][new_location[1]]

            grid[new_location[0]][new_location[1]] = 'O'

            homeowner_moved = 0



    return homeowner_moved





def do_simulation_step(grid, R, threshold, open_locations):

    '''

    Do one step of the simulation.



    Inputs:

        grid: (list of lists of strings) the grid

        R: (int) radius for the neighborhood

        threshold: (float) satisfaction threshold

        open_locations: (list of tuples) the open locations, listed in the order of their precedence



    Returns:

        grid: (list of lists of strings) new grid after one step of simulation

    '''



    homeowner_moved = 0

    move_made = 0

    dissatisfied_homeowners = list_dissatisfied_homeowners(grid, R, threshold)



    for homeowner in dissatisfied_homeowners:

        open_locations.insert(0, homeowner)

        for i in range(len(open_locations)):

                homeowner_moved = attempt_relocation(grid, R, threshold, homeowner, open_locations[i])

                if homeowner_moved == 1:

                    move_made = 1

                    del open_locations[i]

                    break

                elif i == len(open_locations) - 1:

                    del open_locations[0]



    return move_made





def do_simulation(grid, R, threshold, max_steps):

    '''

    Do a full simulation.



    Inputs:

        grid: (list of lists of strings) the grid

        R: (int) radius for the neighborhood

        threshold: (float) satisfaction threshold

        max_steps: (int) maximum number of steps to do



    Returns:

        num_steps: (int) The function number of steps executed.

    '''



    assert utility.is_grid(grid), ("The grid argument has the wrong type.  "

                                   "It should be a list of lists of strings "

                                   "with the same number of rows and columns")



    open_locations = list_open_locations(grid)

    num_steps = 0

    move_made = 1



    while num_steps < max_steps and move_made == 1:

        num_steps = num_steps + 1

        move_made = do_simulation_step(grid, R, threshold, open_locations)



    return num_steps

